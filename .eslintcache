[{"C:\\Users\\Robert Burrows\\level3project\\src\\index.js":"1","C:\\Users\\Robert Burrows\\level3project\\src\\App.js":"2","C:\\Users\\Robert Burrows\\level3project\\src\\components\\Footer.js":"3","C:\\Users\\Robert Burrows\\level3project\\src\\components\\Navbar.js":"4","C:\\Users\\Robert Burrows\\level3project\\src\\pages\\Records.js":"5","C:\\Users\\Robert Burrows\\level3project\\src\\pages\\Classes.js":"6","C:\\Users\\Robert Burrows\\level3project\\src\\pages\\Dashboard.js":"7","C:\\Users\\Robert Burrows\\level3project\\src\\mySampleArray.js":"8","C:\\Users\\Robert Burrows\\level3project\\src\\components\\ClassButtons2.js":"9","C:\\Users\\Robert Burrows\\level3project\\src\\components\\SimpleList.js":"10","C:\\Users\\Robert Burrows\\level3project\\src\\components\\Toggle.js":"11"},{"size":152,"mtime":1607630601566,"results":"12","hashOfConfig":"13"},{"size":281,"mtime":1607630601556,"results":"14","hashOfConfig":"13"},{"size":424,"mtime":1608239218603,"results":"15","hashOfConfig":"13"},{"size":3129,"mtime":1608237856996,"results":"16","hashOfConfig":"13"},{"size":7129,"mtime":1608063891346,"results":"17","hashOfConfig":"13"},{"size":5464,"mtime":1608063181055,"results":"18","hashOfConfig":"13"},{"size":11273,"mtime":1608238670621,"results":"19","hashOfConfig":"13"},{"size":877,"mtime":1607630601567,"results":"20","hashOfConfig":"13"},{"size":517,"mtime":1608062066043,"results":"21","hashOfConfig":"13"},{"size":1522,"mtime":1608061601416,"results":"22","hashOfConfig":"13"},{"size":346,"mtime":1608052814510,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1l5v290",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\Robert Burrows\\level3project\\src\\index.js",[],["48","49"],"C:\\Users\\Robert Burrows\\level3project\\src\\App.js",[],"C:\\Users\\Robert Burrows\\level3project\\src\\components\\Footer.js",[],"C:\\Users\\Robert Burrows\\level3project\\src\\components\\Navbar.js",[],"C:\\Users\\Robert Burrows\\level3project\\src\\pages\\Records.js",[],"C:\\Users\\Robert Burrows\\level3project\\src\\pages\\Classes.js",[],"C:\\Users\\Robert Burrows\\level3project\\src\\pages\\Dashboard.js",["50","51"],"import React from \"react\";\r\nimport ReactModal from \"react-modal\";\r\nimport './dashboard.css' \r\n\r\nconst classesArray = [];\r\nconst studentsArray = [];\r\n\r\nclass Dashboard extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      showModal: false,\r\n      myClasses: classesArray,\r\n      myStudents: studentsArray,\r\n      itemEditSelection: \"\",\r\n      itemEditId: \"\",\r\n      classSelection: undefined,\r\n    };\r\n    this.addClass = this.addClass.bind(this);\r\n    this.removeClass = this.removeClass.bind(this);\r\n    this.handleCloseModal = this.handleCloseModal.bind(this);\r\n    this.editItem = this.editItem.bind(this);\r\n    this.handleClassSelection = this.handleClassSelection.bind(this);\r\n    this.addStudent = this.addStudent.bind(this);\r\n  }\r\n\r\n  editItem() {\r\n    if (this.state.itemEditSelection === \"classes\") {\r\n      let myClasses = [...this.state.myClasses];\r\n      myClasses[this.state.itemEditId].subject = document.getElementById(\r\n        \"editThis\"\r\n      ).value;\r\n      this.setState({ myClasses });\r\n    } else if (this.state.itemEditSelection === \"students\") {\r\n      let editFirst = document.getElementById('editFirst').value\r\n      let editLast = document.getElementById('editLast').value\r\n      let newArray = [...this.state.myClasses];\r\n      newArray[this.state.classSelection].students[this.state.itemEditId] = {\r\n        ...newArray[this.state.classSelection].students[this.state.itemEditId],\r\n        firstName: editFirst,\r\n        lastName: editLast,\r\n      };\r\n      this.setState(\r\n        {\r\n          myClasses: newArray,\r\n        },\r\n        () => console.log(this.state.myClasses)\r\n      );\r\n    }\r\n  }\r\n\r\n  handleOpenModal(array, item) {\r\n    this.setState(\r\n      { itemEditSelection: array, itemEditId: item },\r\n      () => console.log(this.state.itemEditId),\r\n      this.setState({ showModal: true })\r\n    );\r\n  }\r\n\r\n  handleCloseModal() {\r\n    this.editItem();\r\n    this.setState({ showModal: false });\r\n  }\r\n\r\n  removeClass(id) {\r\n    const newClassList = this.state.myClasses.filter((subject, index) => {\r\n      if (index !== id) {\r\n        return subject;\r\n      }\r\n    });\r\n    this.setState({ myClasses: newClassList });\r\n    if(this.state.myClasses.length===0){\r\n      this.setState({itemEditSelection:''})\r\n    }\r\n  }\r\n\r\n  removeStudent(id) {\r\n    this.setState((prevState)=>{\r\n      const updatedClass = prevState.myClasses.map((subject, index)=>{\r\n        if(index !== this.state.classSelection){\r\n          console.log('not'+subject.subject)\r\n          return subject\r\n        }\r\n        const updatedStudents = subject.students.filter((student, index) => {\r\n          if (index !== id) {\r\n            return student;\r\n          }\r\n        });\r\n        return {\r\n          ...subject,\r\n          students: updatedStudents\r\n        };\r\n      });\r\n      return{\r\n        myClasses: updatedClass\r\n      }\r\n    })\r\n  }\r\n\r\n  addStudent(e) {\r\n    let newStudentFirst = document.getElementById(\"addStudentFirstName\").value;\r\n    let newStudentLast = document.getElementById(\"addStudentLastName\").value;\r\n    if (newStudentFirst !== \"\" && newStudentLast !== \"\") {\r\n      let newArray = [...this.state.myClasses];\r\n      let studentIndex = newArray[this.state.classSelection].students.length;\r\n      newArray[this.state.classSelection].students[studentIndex] = {\r\n        ...newArray[this.state.classSelection].students[studentIndex],\r\n        firstName: newStudentFirst,\r\n        lastName: newStudentLast,\r\n      };\r\n      this.setState(\r\n        {\r\n          myClasses: newArray,\r\n        },\r\n        () => console.log(this.state.myClasses)\r\n      );\r\n      document.getElementById(\"addStudentFirstName\").value=''\r\n      document.getElementById(\"addStudentLastName\").value=''\r\n    } else {\r\n      alert(\"Please enter a complete student name\");\r\n    }\r\n    e.preventDefault();\r\n  }\r\n\r\n  addClass(e) {\r\n    let newClass = document.getElementById(\"addClassInput\").value;\r\n    if (newClass !== \"\") {\r\n      this.setState({\r\n        myClasses: [...this.state.myClasses, { subject: newClass }],\r\n      });\r\n      this.setState((prevState) => {\r\n        const addStudentsObject = prevState.myClasses.map((subject) => {\r\n          if (subject.students) {\r\n            return subject;\r\n          } else {\r\n            subject.students = [];\r\n            return subject;\r\n          }\r\n        });\r\n        return {\r\n          myClasses: addStudentsObject,\r\n        };\r\n      });\r\n      document.getElementById(\"addClassInput\").value = \"\";\r\n    }\r\n\r\n    console.log(this.state.myClasses);\r\n    e.preventDefault();\r\n  }\r\n\r\n  handleClassSelection(subject) {\r\n    this.setState({\r\n      classSelection: subject - 1,\r\n    });\r\n\r\n    console.log(this.state.classSelection);\r\n  }\r\n\r\n  render() {\r\n    \r\n    let displayStudents;\r\n    if (this.state.myClasses.length === 0) {\r\n      console.log(\"classSelection\" + this.state.classSelection);\r\n      displayStudents = <h5 className=\"text-center\" >You have no classes listed</h5>;\r\n    } else if (this.state.classSelection === undefined) {\r\n      console.log(\"classSelection\" + this.state.classSelection);\r\n      displayStudents = <span></span>;\r\n    } else if (\r\n      this.state.myClasses[this.state.classSelection].students.length === 0\r\n    ) {\r\n      displayStudents = <h5 className=\"text-center\">You have no students listed</h5>;\r\n    } else {\r\n      displayStudents = this.state.myClasses[\r\n        this.state.classSelection\r\n      ].students.map((student, index) => (\r\n        <li id={\"sl\" + index} key={\"sl\" + index} style={{fontWeight: 'bold'}}>\r\n          {student.firstName + \"  \" + student.lastName}\r\n          <button\r\n            className=\"students\"\r\n            onClick={(e) => this.handleOpenModal(e.target.className, index)}\r\n          >\r\n            Edit\r\n          </button>\r\n          <button onClick={() => this.removeStudent(index)}>Remove</button>\r\n        </li>\r\n      ));\r\n    }\r\n\r\n    let displayClasses;\r\n    console.log(this.state.myClasses);\r\n    if (this.state.myClasses.length === 0) {\r\n      displayClasses = <h5 className=\"text-center\">You have no classes listed</h5>;\r\n    } else {\r\n      displayClasses = this.state.myClasses.map((subject, index) => (\r\n        <li id={\"cl\" + index} key={\"cl\" + index} style={{fontWeight: 'bold'}}>\r\n          {subject.subject}\r\n          <button\r\n            className=\"classes\"\r\n            onClick={(e) => this.handleOpenModal(e.target.className, index)}\r\n          >\r\n            Edit\r\n          </button>\r\n          <button onClick={() => this.removeClass(index)}>Remove</button>\r\n        </li>\r\n      ));\r\n    }\r\n\r\n    let editValue;\r\n    if (this.state.itemEditSelection === \"classes\" && this.state.myClasses[this.state.itemEditId]) {\r\n      editValue = this.state.myClasses[this.state.itemEditId].subject;\r\n    }else if(this.state.myClasses[this.state.classSelection]!== undefined && this.state.itemEditSelection==='students'&& this.state.myClasses[this.state.classSelection].students[this.state.itemEditId]){\r\n      editValue = this.state.myClasses[this.state.classSelection].students[this.state.itemEditId]\r\n    }else{\r\n      editValue=''\r\n    }\r\n\r\n    let editOptions;\r\n    if (this.state.itemEditSelection==='classes'){\r\n      editOptions = <input id=\"editThis\" defaultValue={editValue} />\r\n    }else if (this.state.itemEditSelection==='students'){\r\n      editOptions = <div>\r\n        <input id=\"editFirst\" defaultValue={editValue.firstName} />\r\n        <input id=\"editLast\" defaultValue={editValue.lastName} />\r\n      </div>\r\n    }\r\n\r\n    let classList;\r\n    if (this.state.myClasses.length === 0) {\r\n      classList = <h5>You have no classes listed</h5>;\r\n    } else {\r\n      classList = this.state.myClasses.map((subject, index) => (\r\n        <option key={\"cs\" + index} id={\"cs\" + index} value={index}>\r\n          {subject.subject}\r\n        </option>\r\n      ));\r\n    }\r\n    return (\r\n      <div>\r\n        <div>\r\n          <ReactModal isOpen={this.state.showModal}>\r\n            <form onSubmit={this.handleCloseModal}>\r\n              {editOptions}\r\n              <input type=\"submit\" value=\"Submit\"></input>\r\n            </form>\r\n          </ReactModal>\r\n        </div>\r\n        <div className='container-fluid'>\r\n        <div className=\"row justify-content-around\">\r\n          <div className=\"col-12 col-md-3 mt-3 dashboard\">\r\n            <h3 className=\"text-center\">Classes</h3>\r\n            <div className=\"d-flex justify-content-center\" >\r\n            <form onSubmit={this.addClass}>\r\n              <input\r\n                ref={(a) => (this._inputElement = a)}\r\n                id=\"addClassInput\"\r\n                placeholder=\"Add a class\"\r\n                className='mx-2'\r\n              ></input>\r\n              {/* <input className='mx-2'type=\"submit\" value=\"Submit\"></input> */}\r\n              <button className='mx-2 mybutton' type='submit' value='submit'>Submit</button>\r\n            </form>\r\n            </div>\r\n            <div className=\"d-flex justify-content-center mt-2\">\r\n            <ol>{displayClasses}</ol>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-12 col-md-5 dashboard mt-3\">\r\n            <h3 className=\"text-center\">People</h3>\r\n            <div className=\"d-flex justify-content-center\" >\r\n            <form className=\"mx-auto\">\r\n              <div className=\"form-group\">\r\n                <select\r\n                  className=\"form-control\"\r\n                  id=\"selClass\"\r\n                  onChange={() =>\r\n                    this.handleClassSelection(\r\n                      document.getElementById(\"selClass\").selectedIndex\r\n                    )\r\n                  }\r\n                >\r\n                  <option\r\n                    key=\"defaultClass\"\r\n                    value=\"none\"\r\n                    disabled\r\n                    selected\r\n                    hidden\r\n                  >\r\n                    Choose Class\r\n                  </option>\r\n                 \r\n                  {classList}\r\n                  \r\n                </select>\r\n              </div>\r\n            </form>\r\n            </div>\r\n            <div className=\"d-flex justify-content-center\" >\r\n            <form onSubmit={this.addStudent}>\r\n              <div className=\"d-flex justify-items-center\">\r\n              <input\r\n                ref={(a) => (this._inputElement = a)}\r\n                id=\"addStudentFirstName\"\r\n                placeholder=\"First Name\"\r\n                className='mx-2'\r\n              ></input>\r\n              <input\r\n                ref={(a) => (this._inputElement = a)}\r\n                id=\"addStudentLastName\"\r\n                placeholder=\"Last Name\"\r\n                className='mx-2'\r\n              ></input>\r\n              {/* <input className='mx-2' type=\"submit\" value=\"Submit\"></input> */}\r\n              <button className='mx-2 mybutton' type='submit' value='submit'>Submit</button>\r\n              </div>\r\n            </form>\r\n            </div>\r\n            <div className=\"d-flex justify-content-center mt-2\">\r\n            <ol>{displayStudents}</ol>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-12 col-md-3 mt-3 dashboard\">\r\n            <h3 className=\"text-center\">Settings</h3>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\Robert Burrows\\level3project\\src\\mySampleArray.js",[],"C:\\Users\\Robert Burrows\\level3project\\src\\components\\ClassButtons2.js",[],"C:\\Users\\Robert Burrows\\level3project\\src\\components\\SimpleList.js",[],"C:\\Users\\Robert Burrows\\level3project\\src\\components\\Toggle.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":66,"column":71,"nodeType":"58","messageId":"59","endLine":66,"endColumn":73},{"ruleId":"56","severity":1,"message":"57","line":84,"column":74,"nodeType":"58","messageId":"59","endLine":84,"endColumn":76},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]